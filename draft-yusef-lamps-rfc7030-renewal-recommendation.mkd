---
title: Certificate Renewal Recommendations for Enrollment over Secure Transport
abbrev: est-renew
docname: draft-yusef-lamps-rfc7030-renewal-recommendation-01

# stand_alone: true

ipr: trust200902
area: Internet
wg: LAMPS Working Group
kw: Internet-Draft
cat: std

coding: utf-8
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
- ins: R. Shekh-Yusef
  name: Rifaat Shekh-Yusef
  org: Ciena
  email: rifaat.s.ietf@gmail.com

- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

- name: Mike Ounsworth
  org: Entrust Limited
  email: mike.ounsworth@entrust.com

normative:
  RFC7030:

informative:
  RFC9773:

venue:
  group: lamps
  mail: spasm@ietf.org
  github: mcr/rfc7030-renewal-recommendation

--- abstract

This document describes an extension to RFC7030, Enrollment over Secure Transport to
give an indication to a end-entity device when it should start attempting to renew its certificates.

Prior art is that client decides, with a typical recommmendation to start when the remaining lifetime of the certificate is at the 50% point.
As typical certificate lifetimes are reduced from years to fractions of a year, the 50% may be far too early, and this document provides a way to give alternate advice.

--- middle

# Introduction

{{RFC9773, Section 1}} explains why certificate lifetimes and renewal times need more deterministic control in the ACME {{?RFC8555}} ecosystem.
Similar arguments apply to the {{RFC7030}} ecosystem.

This document extends {{RFC7030}} to add support for renewal information, by adding a new entry to the HTTP URIs for Control list defined in {{RFC7030, Section 3.2.2}}

This mechanism enables EST servers to provide suggested detailed renewal operations to EST clients, and enables clients to inform the EST server that they have successfully renewed and replaced a certificate.

The /renewal-info URI is added, as an OPTIONAL operation, to the table in figure 5 in section 3.2.2 of {{RFC7030}}.

# Terminology

{::boilerplate bcp14-tagged}

# Protocol Details

A new magic header will be returned during RFC7030 certificate enrollment, whether using simpleenroll, or fullcmc.

# Renewal Information Request

To retrieve the renewal information, the EST client uses the following HTTP request-line:

```
GET /.well-known/est/renewal-info/<certificate-id>;
```

The request includes a unique identifier for the certificate in question.
The unique identifier is constructed by concatenating the base64url encoding {{!RFC4648}} of the keyIdentifier field of the certificate's Authority Key Identifier (AKI) {{!RFC5280}} extension, the period character ".", and the base64url encoding of the DER-encoded Serial Number field (without the tag and length bytes).
All trailing "=" characters MUST be stripped from both parts of the unique identifier.

Thus, the full request URL is constructed as follows (split onto multiple lines for readability), where the "\|\|" operator indicates string concatenation:

```
url = /.well-known/est/renewal-info
      || '/'
      || base64url(AKI keyIdentifier)
      || '.'
      || base64url(Serial)
```


# Renewal Information Response

The structure the EST RenewalInfo object is as follows:

suggestedWindow (object, required):
      A JSON object with two keys, "start" and "end", whose values are
      timestamps, encoded in the format specified in {{!RFC3339}}, which
      bound the window of time in which the CA recommends renewing the
      certificate.

For example:

```
   HTTP/1.1 200 OK
   Content-Type: application/json
   Retry-After: 21600

   {
     "suggestedWindow": {
       "start": "2025-01-02T04:00:00Z",
       "end": "2025-01-03T04:00:00Z"
     }
   }
```

## Base64 Not Used

{{RFC7030}} mistakenly declared that all content would be base64 encoded.
{{!RFC8951}} clarifies that the content is to be base64 encoded, whether or not there is a Content-Transfer-Encoding header present.
It further clarifies that future extensions (such as this document) will not use base64 encoding.
The response detailed above is not base64 encoded.

# Renewal Operations

Clients MUST attempt renewal at a time of their choosing based on the suggested renewal window, obtained in the previous step.

The following algorithm is RECOMMENDED for choosing a renewal time:

1.  Select a uniform random time within the suggested window.

2.  If the selected time is in the past, attempt renewal immediately.

3.  Otherwise, if the client can schedule itself to attempt renewal
    at exactly the selected time, do so.

4.  Otherwise, if the selected time is before the next time that the
    client would wake up normally, attempt renewal immediately.

5.  Otherwise, sleep until the time indicated by the Retry-After
    header and return to Step 1.

In all cases, renewal attempts are subject to the client's existing error backoff and retry intervals.

A RenewalInfo object in which the end timestamp equals or precedes the start timestamp is invalid.  Servers MUST NOT serve such a response, and clients MUST treat one as though they failed to receive any response from the server (e.g., retry at an appropriate interval, renew on a fallback schedule, etc.).

# Fetching Schedule

The advice in {{RFC9773, Section 4.3}} applies:

   Clients SHOULD fetch a certificate's RenewalInfo immediately after
   issuance.

   During the lifetime of a certificate, the renewal information needs
   to be fetched frequently enough that clients learn about changes in
   the suggested window quickly, but without overwhelming the server.
   This protocol uses the Retry-After header [RFC9110] to indicate to
   clients how often to retry.  Note that in other HTTP applications,
   Retry-After often indicates the minimum time to wait before retrying
   a request.  In this protocol, it indicates the desired (i.e., both
   requested minimum and maximum) amount of time to wait.

   Clients MUST NOT check a certificate's RenewalInfo after the
   certificate has expired.  Clients MUST NOT check a certificate's
   RenewalInfo after they consider the certificate to be replaced (for
   instance, after a new certificate for the same identifiers has been
   received and configured).



# Privacy Considerations

A very short certificate lifetime renewal time will cause clients to communicate with the EST Registrar more frequently.

EST connections for renewals typically make use of mutually authenticated TLS.
When the client certificate being an IDevID, or the last issued certificate, often an LDevID, there is potential to disclose identities during this connection when using TLS 1.2.

TLS 1.3 does not suffer from this problem, and it's use is RECOMMENDED as per {{?I-D.ietf-uta-require-tls13}}

# Security Considerations

Not sure what yet.

# IANA Considerations

## Updates to EST .well-known registration

To the Well-Known URIs Registry, at:
"https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml", this document updates the well-known name "est".

IANA is asked to change the registration of "est" to include RFC7030, RFC9148,
and this document.

## EST .well-known sub-registry

IANA is requested to create a new Sub-Registry inside of the well-
known URIs Registry entitled: "EST well-known URIs".

The registry shall have at least five columns:

1. URI Path Component
2. short-URI Component
3. CoAP Path abbreviation
4. description
5. reference.

The Short-URI components are from {{RFC9148}}.
The CoAP Path abbreviations are from {{I-D.ietf-core-uri-path-abbrev}}, and are allocated according to the IANA Considerations in that document, which is Specification Required.

New items can be added using the Specification Required process.

The initial contents of this registry shall be:

     URI Path: cacerts
     short URI Path: crts
     CoAP Path abbreviation: 301
     Description: Description of CA certificates
     Reference: RFC7030 and RFC9148

     URI Path: simpleenroll
     short URI Path: sen
     CoAP Path abbreviation: 302
     Description: Enrollment of Clients
     Reference: RFC7030 and RFC9148

     URI Path: simplereenroll
     short URI Path: sren
     CoAP Path abbreviation: 303
     Description: Re-enrollment of Clients
     Reference: RFC7030 and RFC9148

     URI Path: fullcmc
     short URI Path: none
     CoAP Path abbreviation: none
     Description: Full CMC operations
     Reference: RFC7030

     URI Path: serverkeygen
     short URI Path: skg
     CoAP Path abbreviation: 304
     Description: Server-Side Key Generation
     Reference: RFC7030 and RFC9148

     URI Path: serverkeygen
     short URI Path: skc
     CoAP Path abbreviation: 305
     Description: Server-Side Key Generation
     Reference: RFC7030 and RFC9148

     URI Path: csrattrs
     short URI Path: att
     CoAP Path abbreviation: 306
     Description: CSR Attributes Value
     Reference: RFC7030, RFC9148 and {{I-D.ietf-lamps-csr-attributes}}

     URI Path: renewal-info
     short URI Path: none
     CoAP Path abbreviation: 307 (suggested)
     Description: Renewal information time values
     Reference: This Document.



# Acknowledgements

Many bits of text are taken from {{RFC9773}}.

# Changelog


--- back

